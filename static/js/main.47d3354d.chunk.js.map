{"version":3,"sources":["components/SingleTask.jsx","components/TaskForm.jsx","components/List.jsx","components/ListFilter.jsx","components/ListHeader.jsx","App.jsx","serviceWorker.js","index.js"],"names":["SingleTask","props","Fragment","id","list","task","priority","className","onClick","triggerEdit","triggerDelete","TaskForm","state","populateTaskOnSubmit","populateTask","handleSubmit","allTask","isEditing","localStorage","length","JSON","parse","getItem","forEach","push","myTasks","setItem","stringify","existingTask","i","form","splice","changeHandler","event","name","target","value","setState","nextProps","this","item","Modal","isOpen","isModal","ModalHeader","toggle","toggleAddQuestion","ModalBody","Form","FormGroup","Label","Input","type","onChange","ModalFooter","Button","color","React","Component","List","items","noItems","modal","itemSelectedForEdit","storageList","taskList","showMessage","editTask","prevState","deleteTask","Swal","fire","title","text","showCancelButton","confirmButtonColor","cancelButtonColor","confirmButtonText","then","result","deleteSingleTask","fillList","aList","key","style","margin","Table","hover","float","cursor","data-toggle","map","loadTask","ListFilter","showList","handleClickToggle","triggerActive","taskType","priorityType","getPriorityType","cx","cy","r","fill","isActive","width","height","ListHeader","App","itemPriority","itemFilter","priorityValue","taskFilter","activeFilter","activeType","filterTaskDisplay","taskItem","filteredPriorityType","filter","populateFilteredTask","filteredTask","currentTask","clearTask","clear","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.47d3354d.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"../App.css\";\r\n\r\nconst SingleTask = props => {\r\n\r\n  const editSingleTask = () => {\r\n    props.triggerEdit(props.list);\r\n  };\r\n\r\n  const deleteSingleTask = () => {\r\n    props.triggerDelete(props.list);\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <tbody >\r\n        <tr id=\"fadeText\">\r\n          {/* <th scope=\"row\">#</th> */}\r\n          <td>{props.list.task}</td>\r\n          <td>{props.list.priority}</td>\r\n          <td>\r\n            <button\r\n              className=\"btn btn-outline-dark btn-sm\"\r\n              onClick={editSingleTask}\r\n            >\r\n              Edit\r\n            </button>\r\n          </td>\r\n          <td>\r\n            <button\r\n              className=\"btn btn-outline-dark btn-sm\"\r\n              onClick={deleteSingleTask}\r\n            >\r\n              Remove\r\n            </button>\r\n          </td>\r\n        </tr>\r\n      </tbody>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default SingleTask;\r\n","import \"../App.css\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter, Form, FormGroup, Label, Input  } from \"reactstrap\";\r\nimport React from \"react\";\r\n\r\n\r\nclass TaskForm extends React.Component {\r\n  \r\n  state = {\r\n    task: \"\",\r\n    priority: \"\"\r\n  };\r\n\r\n  // static getDerivedStateFromProps (nextProps) {\r\n  //   debugger;\r\n  //   if (this.props && this.props.isEditing !== nextProps.isEditing) {\r\n  //     const item = nextProps.form;\r\n  //     return {\r\n  //       task: item.task,\r\n  //       priority: item.priority\r\n  //     };\r\n  //   } \r\n  //   // else{\r\n  //   //   return null;\r\n  //   // }\r\n  // }\r\n\r\n  componentWillReceiveProps(nextProps) {\r\n    if (this.props.isEditing !== nextProps.isEditing) {\r\n      const item = nextProps.form;\r\n      this.setState({\r\n        task: item.task,\r\n        priority: item.priority\r\n      });\r\n    }\r\n  }\r\n\r\n  \r\n\r\n  populateTaskOnSubmit = () =>{\r\n    this.props.populateTask()\r\n  }\r\n\r\n  handleSubmit = () => {\r\n    const allTask = [];\r\n    if (this.props.isEditing === false && localStorage.length > 0) {\r\n      const existingTask = JSON.parse(localStorage.getItem(\"myTasks\"));\r\n      existingTask.forEach(task => {\r\n        allTask.push(task);\r\n      });\r\n\r\n      const myTasks = this.state;\r\n\r\n      allTask.push(myTasks);\r\n      localStorage.setItem(\"myTasks\", JSON.stringify(allTask))\r\n        // this.populateTaskOnSubmit()\r\n\r\n\r\n    } else if (this.props.isEditing === true && localStorage.length > 0) {\r\n      const existingTask = JSON.parse(localStorage.getItem(\"myTasks\"));\r\n      for (let i = 0; i < existingTask.length; i++) {\r\n        let singleTask = existingTask[i];\r\n        if (singleTask.task === this.props.form.task) {\r\n          existingTask.splice(i, 1);\r\n          //maybe put the replace array method here to put the update task where I spliced the old task. \r\n        }\r\n      }\r\n      existingTask.forEach(task => {\r\n        allTask.push(task);\r\n      });\r\n\r\n      const myTasks = this.state;\r\n\r\n      allTask.push(myTasks);\r\n\r\n      localStorage.setItem(\"myTasks\", JSON.stringify(allTask));\r\n\r\n      // this.populateTaskOnSubmit()\r\n\r\n    } else {\r\n      const myTasks = this.state;\r\n      allTask.push(myTasks);\r\n      localStorage.setItem(\"myTasks\", JSON.stringify(allTask));\r\n      // this.populateTaskOnSubmit()\r\n    };\r\n  };\r\n\r\n  changeHandler = event => {\r\n    const name = event.target.name;\r\n    const value = event.target.value;\r\n    this.setState({\r\n      [name]: value\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <Modal isOpen={this.props.isModal}>\r\n          <ModalHeader\r\n            toggle={\r\n              this.props.isEditing\r\n                ? this.props.toggle\r\n                : this.props.toggleAddQuestion\r\n            }\r\n          >\r\n           <div> {this.props.isEditing ? \"Update Task\" : \"Add New Task\"}</div>\r\n          </ModalHeader>\r\n          <ModalBody>\r\n            <Form>\r\n              <FormGroup>\r\n                <Label>Task</Label>\r\n                <Input\r\n                  type=\"text\"\r\n                  name=\"task\"\r\n                  value={this.state.task}\r\n                  onChange={this.changeHandler}\r\n                ></Input>\r\n              </FormGroup>\r\n\r\n              <FormGroup>\r\n                <Label>Priority</Label>\r\n                <Input\r\n                  type=\"select\"\r\n                  name=\"priority\"\r\n                  value={this.state.priority}\r\n                  onChange={this.changeHandler}\r\n                >\r\n                  <option>----</option>\r\n                  <option>High</option>\r\n                  <option>Medium</option>\r\n                  <option>Low</option>\r\n                </Input>\r\n              </FormGroup>\r\n            </Form>\r\n          </ModalBody>\r\n          <ModalFooter>\r\n            <Button color=\"primary\" onClick={this.handleSubmit}>\r\n              {this.props.isEditing ? \"Update\" : \"Add\"}\r\n            </Button>{\" \"}\r\n            <Button\r\n              color=\"secondary\"\r\n              onClick={\r\n                this.props.isEditing\r\n                  ? this.props.toggle\r\n                  : this.props.toggleAddQuestion\r\n              }\r\n            >\r\n              Cancel\r\n            </Button>\r\n          </ModalFooter>\r\n        </Modal>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TaskForm;\r\n","import \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport React from \"react\";\r\nimport SingleTask from \"./SingleTask\";\r\nimport Swal from \"sweetalert2\";\r\nimport { Table } from \"reactstrap\";\r\nimport TaskForm from \"./TaskForm\";\r\n\r\nclass List extends React.Component {\r\n  state = {\r\n    items: [],\r\n    noItems: false,\r\n    form: {\r\n      task: \"\",\r\n      priority: \"\"\r\n    },\r\n    modal: false,\r\n    isEditing: false,\r\n    itemSelectedForEdit: {\r\n      task: \"\",\r\n      priority: \"\"\r\n    }\r\n  };\r\n\r\n  componentDidMount() {\r\n    if (localStorage.length > 0) {\r\n      this.storageList();\r\n    } else {\r\n      this.showMessage();\r\n    }\r\n  }\r\n\r\n  storageList = () => {\r\n    const taskList = JSON.parse(localStorage.getItem(\"myTasks\"));\r\n    this.setState(() => ({\r\n       items: taskList \r\n      }));\r\n  };\r\n\r\n  showMessage = () => {\r\n    this.setState(() => ({\r\n       noItems: !this.state.noItems\r\n       }));\r\n  };\r\n\r\n  editTask = item => {\r\n    this.setState(prevState => ({\r\n      modal: !prevState.modal,\r\n      isEditing: !prevState.isEditing,\r\n      form: {\r\n        task: item.task,\r\n        priority: item.priority\r\n      },\r\n      itemSelectedForEdit: {\r\n        task: item.task,\r\n        priority: item.priority\r\n      }\r\n    }));\r\n  };\r\n\r\n  deleteTask = item => {\r\n    Swal.fire({\r\n      title: \"Are you sure?\",\r\n      text: \"You won't be able to revert this!\",\r\n      showCancelButton: true,\r\n      confirmButtonColor: \"#042A38\",\r\n      cancelButtonColor: \"#d33\",\r\n      confirmButtonText: \"Yes, delete it!\"\r\n    }).then(result => {\r\n      if (result.value) {\r\n        Swal.fire(\"Deleted!\").then(\r\n         this.deleteSingleTask(item)\r\n        );\r\n      }\r\n    });\r\n  }\r\n\r\n    deleteSingleTask = item => {\r\n    const allTask = [];\r\n    const existingTask = JSON.parse(localStorage.getItem(\"myTasks\"));\r\n    for (let i = 0; i < existingTask.length; i++) {\r\n      let singleTask = existingTask[i];\r\n      if (singleTask.task === item.task) {\r\n        existingTask.splice(i, 1);\r\n      }\r\n    }\r\n      existingTask.forEach(task => {\r\n        allTask.push(task);\r\n      });\r\n      localStorage.setItem(\"myTasks\", JSON.stringify(allTask));\r\n   \r\n  };\r\n\r\n\r\n  fillList = (aList, i) => (\r\n    <SingleTask\r\n      list={aList}\r\n      key={i}\r\n      triggerEdit={this.editTask}\r\n      triggerDelete={this.deleteTask}\r\n    />\r\n  );\r\n\r\n  toggle = () => {\r\n    this.setState(prevState => ({\r\n      modal: !prevState.modal,\r\n      isEditing: !prevState.isEditing\r\n    }));\r\n  };\r\n\r\n  toggleAddQuestion = () => {\r\n    this.setState(prevState => ({\r\n      modal: !prevState.modal\r\n    }));\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        {this.state.noItems ? (\r\n          <div style={{ margin: \"20%\" }}>\r\n            <h1>Lets get the day started!</h1>\r\n            <p>Please add a new task.</p>\r\n            <button\r\n              onClick={this.toggleAddQuestion}\r\n              className=\"btn btn-outline-secondary btn-lg btn-block\"\r\n            >\r\n              Add Task{\" \"}\r\n            </button>\r\n          </div>\r\n        ) : (\r\n          <Table hover>\r\n            <thead>\r\n              <tr>\r\n                {/* <th>#</th> */}\r\n                <th>Task</th>\r\n                <th>Priority</th>\r\n                <th></th>\r\n                <th></th>\r\n                <th>\r\n                  <em\r\n                    className=\"fa-1x mr-2 fas fa-plus\"\r\n                    onClick={this.toggleAddQuestion}\r\n                    style={{ float: \"center\", cursor: \"pointer\" }}\r\n                    data-toggle=\"tooltip\"\r\n                    title=\"Add Task\"\r\n                  >\r\n                  </em>\r\n                </th>\r\n              </tr>\r\n            </thead>\r\n            {this.props.item.length > 0 && this.props.item.map(this.fillList)}\r\n          </Table>\r\n        )}\r\n        <TaskForm\r\n          loadTask={this.storageList}\r\n          isModal={this.state.modal}\r\n          toggle={this.toggle}\r\n          toggleAddQuestion={this.toggleAddQuestion}\r\n          form={this.state.form}\r\n          isEditing={this.state.isEditing}\r\n          itemSelectedForEdit={this.itemSelectedForEdit}\r\n          populateTask={this.storageList}\r\n        />\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default List;\r\n","import React from \"react\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"./ListStyle.css\";\r\n\r\nclass ListFilter extends React.Component {\r\n  state = {\r\n    items: []\r\n  };\r\n\r\n  componentDidMount() {\r\n    if (localStorage.length > 0) {\r\n      this.showList();\r\n    }\r\n  }\r\n\r\n  showList = () => {\r\n    const taskList = JSON.parse(localStorage.getItem(\"myTasks\"));\r\n    this.setState({ items: taskList });\r\n  };\r\n\r\n  handleClickToggle = () => {\r\n    this.props.triggerActive(this.props.taskType.priorityType);\r\n  };\r\n\r\n  getPriorityType = priority => {\r\n    switch (priority) {\r\n      case \"High\":\r\n        return <circle cx=\"50%\" cy=\"50%\" r=\"10\" fill=\"red\" />;\r\n      case \"Medium\":\r\n        return <circle cx=\"50%\" cy=\"50%\" r=\"10\" fill=\"yellow\" />;\r\n      case \"Low\":\r\n        return <circle cx=\"50%\" cy=\"50%\" r=\"10\" fill=\"green\" />;\r\n      default:\r\n        return <span className=\"circle bg-dark mr-2\"></span>;\r\n    }\r\n  };\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <div className=\"list-group\" style={{ cursor: \"pointer\" }}>\r\n          <div\r\n            className={\r\n              this.props.taskType.isActive\r\n                ? \"active list-group-item list-group-item-action d-flex justify-content-between align-items-center rounded-0\"\r\n                : \"list-group-item list-group-item-action d-flex justify-content-between align-items-center rounded-0\"\r\n            }\r\n            onClick={this.handleClickToggle}\r\n          >\r\n            <span className=\"container\">\r\n              <svg width=\"40\" height=\"40\">\r\n                {this.getPriorityType(this.props.taskType.priorityType)}\r\n              </svg>\r\n            </span>\r\n            <span> {this.props.taskType.priorityType}</span>\r\n          </div>\r\n        </div>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ListFilter;\r\n","import \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"../App.css\";\r\nimport React from \"react\";\r\n\r\nconst ListHeader = () => {\r\n  return (\r\n    <React.Fragment>\r\n      <div className=\"listName\" >\r\n        <h1 id=\"fadeText\">Task Tracker</h1>\r\n        </div>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default ListHeader;\r\n","import \"./App.css\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport List from \"./components/List.jsx\";\r\nimport ListFilter from \"./components/ListFilter.jsx\";\r\nimport ListHeader from \"./components/ListHeader.jsx\";\r\nimport React from \"react\";\r\nimport Swal from \"sweetalert2\";\r\n\r\nclass App extends React.Component {\r\n  state = {\r\n    items: [],\r\n    itemPriority: [],\r\n    itemFilter: false\r\n  };\r\n\r\n  componentDidMount() {\r\n    if (localStorage.length > 0) {\r\n      this.storageList();\r\n      this.priorityValue();\r\n    }\r\n  }\r\n\r\n  storageList = () => {\r\n    const taskList = JSON.parse(localStorage.getItem(\"myTasks\"));\r\n    this.setState(() => ({\r\n      items: taskList\r\n    }));\r\n  };\r\n\r\n  priorityValue = () => {\r\n    const priority = [\"High\", \"Medium\", \"Low\"];\r\n    this.setState(() => ({\r\n      itemPriority: priority.map(priorityType => ({\r\n        priorityType,\r\n        isActive: false\r\n      }))\r\n    }));\r\n  };\r\n\r\n  taskFilter = type => {\r\n    return <ListFilter taskType={type} triggerActive={this.activeFilter} />;\r\n  };\r\n\r\n  activeFilter = item => {\r\n    this.setState(state => ({\r\n        itemPriority: state.itemPriority.map(activeType => {\r\n          if (activeType.priorityType === item) {\r\n            activeType.isActive = !activeType.isActive;\r\n          }\r\n          return activeType;\r\n        })\r\n      }),\r\n      () => this.filterTaskDisplay(this.state.itemPriority)\r\n    );\r\n  };\r\n\r\n  filterTaskDisplay = taskItem => {\r\n    const filteredPriorityType = taskItem.filter(\r\n      priorityType => priorityType.isActive\r\n    );\r\n    if (filteredPriorityType.length === 0) {\r\n      this.storageList();\r\n    } else {\r\n      const priority = filteredPriorityType.map(type => type);\r\n      this.populateFilteredTask(priority);\r\n    }\r\n  };\r\n\r\n  populateFilteredTask = priority => {\r\n    const filteredTask = [];\r\n    const currentTask = JSON.parse(localStorage.getItem(\"myTasks\"));\r\n\r\n    for (let i = 0; i < currentTask.length; i++) {\r\n      const singleTask = currentTask[i].priority;\r\n      const singlePriority = priority[0].priorityType;\r\n\r\n      if (singleTask === singlePriority) {\r\n        filteredTask.push(currentTask[i]);\r\n      }\r\n    }\r\n    this.setState(() => ({\r\n      items: filteredTask\r\n    }));\r\n  };\r\n\r\n  clearTask = () => {\r\n    Swal.fire({\r\n      title: \"Before you proceed...\",\r\n      text: \"Are you sure you want to clear your tasks?\",\r\n      showCancelButton: true,\r\n      confirmButtonColor: \"#042A38\",\r\n      cancelButtonColor: \"#d33\",\r\n      confirmButtonText: \"Clear All Task\"\r\n    }).then(result => {\r\n      if (result.value) {\r\n        Swal.fire(\"Cleared all task!\").then(localStorage.clear());\r\n      }\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <ListHeader />\r\n        <div className=\"row\">\r\n          <div className=\"col-lg-3\" id=\"sideList\">\r\n            <div className=\"card b\" style={{ margin: \"2.5%\" }} id=\"fadeText\">\r\n              <div className=\"list-group\">\r\n                <div className=\"list-group-item d-flex justify-content-between align-items-center rounded-0\">\r\n                  <strong className=\"text-muted\">My Task</strong>\r\n                  <span className=\"float-right badge\">\r\n                    {this.state.items && this.state.items.length}\r\n                  </span>\r\n                </div>\r\n              </div>\r\n              <div className=\"list-group\">\r\n                {this.state.itemPriority.map(this.taskFilter)}\r\n              </div>\r\n            </div>\r\n\r\n            <button\r\n              style={{ margin: \"2.5%\" }}\r\n              className=\"btn btn-outline-dark btn-lg btn-block\"\r\n              id=\"fadeText\"\r\n              onClick={this.clearTask}\r\n            >\r\n              Clear\r\n            </button>\r\n          </div>\r\n          <div className=\"col-lg-9 App\">\r\n            <List item={this.state.items} />\r\n          </div>\r\n        </div>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App.jsx';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}